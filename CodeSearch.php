<?php

// This file is generated by Composer
require_once __DIR__ . '/vendor/autoload.php';

use Github\Client;
use Symfony\Component\HttpClient\HttplugClient;
use Symfony\Component\Dotenv\Dotenv;

/**
 * Search for code with GitHub API
 */
class CodeSearch
{
    /**
     * GitHub API client
     *
     * @var Github\Client
     */
    private $client;

    /**
     * GitHub API query string
     *
     * @var string
     */
    private $query;

    /**
     * Filename where output is to be saved
     *
     * @var string
     */
    private $filename;

    /**
     * Constructor
     *
     * @param string $query
     * @param string $filename
     */
    public function __construct($query, $filename)
    {
        $dotenv = new Dotenv();
        $dotenv->load(__DIR__.'/.env');
        $auth_token = $_ENV['AUTH_TOKEN'];
    
        // -----> hacky way to get the text matches and change per page... clean me up later! <-----
        // in vendor/knplabs/github-api/lib/Github/Api/Search.php->code() change to the following
        // $this->acceptHeaderValue = 'application/vnd.github.v3.text-match+json';
        // return $this->get('/search/code', ['q' => $q, 'sort' => $sort, 'order' => $order, 'per_page' => 100]);
        // if you need more than 100 results, we will have to add pagination

        $this->query = $query;
        $this->filename = $filename;
        $this->client = Client::createWithHttpClient(new HttplugClient());
        $this->client = new \Github\Client();
        
        $this->client->authenticate($auth_token, null, Github\Client::AUTH_ACCESS_TOKEN);
    }

    /**
     * Perform a code search
     *
     * @return void
     */
    public function search()
    {
        try {
            $files = $this->client->api('search')->code($this->query);
            $repos = [];

            foreach ($files['items'] as $file) {
                $name = $file['repository']['name'];

                if (!array_key_exists($name, $repos)) {
                    $repos[$name] = [];
                }

                $datum = [
                    'path' => $file['path'],
                    'url' => $file['html_url'],
                    'text_matches' => $file['text_matches'][0]['fragment']
                ];

                array_push($repos[$name], $datum);
            }

            print("Files found: " . $files['total_count'] . PHP_EOL);

            if ($this->filename) {
                print("Saving output to: " . $this->filename . PHP_EOL);
                file_put_contents("./$this->filename", json_encode($repos, JSON_PRETTY_PRINT));
            }

        } catch (\Exception $e) {
            print $e->getMessage() . PHP_EOL;
        }
    }
}

